{"version":3,"sources":["components/ContactForm/ContactForm.module.scss","components/Section/Section.module.scss","components/Filter/Filter.module.scss","components/Header/Header.module.scss","components/ContactList/ContactList.module.scss","redux/operations.js","redux/actions.js","redux/reducer.js","redux/store.js","components/Header/Header.jsx","redux/selectors.js","components/Section/Section.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","index.js"],"names":["module","exports","axios","defaults","baseURL","fetchContacts","createAsyncThunk","a","pending","get","data","rejected","addContact","contact","post","deleteContact","id","delete","changeFilter","createAction","items","createReducer","fulfilled","_","payload","state","action","some","name","alert","getNewContact","filter","loading","combineReducers","store","configureStore","reducer","contacts","contactsReducer","devTools","process","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","Header","title","children","className","s","AppHeader","getFilter","isLoading","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","includes","Section","loader","useSelector","Title","ContentWrapper","Form","dispatch","useDispatch","useState","setName","number","setNumber","handleChange","e","currentTarget","value","reset","nameInputId","shortid","generate","numberInputId","onSubmit","preventDefault","Group","type","placeholder","pattern","required","onChange","Btn","ContactList","useEffect","contactList","map","contactListItem","contactBtn","btn","onClick","Filter","console","log","FilterLabel","htmlFor","FilterInput","autoFocus","target","App","color","height","width","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d5a3b4f5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"ContactForm_Form__pmdyI\",\"Btn\":\"ContactForm_Btn__3RNXk\",\"Group\":\"ContactForm_Group__2kBuf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Section\":\"Section_Section__CqcNT\",\"Title\":\"Section_Title__3JdV3\",\"ContentWrapper\":\"Section_ContentWrapper__H17GO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Filter\":\"Filter_Filter__3IG7j\",\"FilterInput\":\"Filter_FilterInput__3kH4y\",\"FilterLabel\":\"Filter_FilterLabel__31TZv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppHeader\":\"Header_AppHeader__1safz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__9FkvI\",\"contactBtn\":\"ContactList_contactBtn__1j41G\",\"btn\":\"ContactList_btn__LjK5L\"};","import axios from 'axios';\nimport { createAsyncThunk } from '@reduxjs/toolkit';\n\n// axios.defaults.baseURL = 'http://localhost:4040';\naxios.defaults.baseURL = 'https://618a957134b4f400177c47b5.mockapi.io/api/v1';\n\nconst fetchContacts = createAsyncThunk('contacts/fetchContacts', async () => {\n  fetchContacts.pending();\n  try {\n    const { data } = await axios.get('/contacts');\n    return data;\n  } catch (error) {\n    fetchContacts.rejected(error);\n  }\n});\n\nconst addContact = createAsyncThunk('contacts/addContact', async contact => {\n  addContact.pending();\n  try {\n    const { data } = await axios.post('/contacts', contact);\n\n    return data;\n  } catch (error) {\n    addContact.rejected(error);\n  }\n});\n\nconst deleteContact = createAsyncThunk('contacts/deleteContact', async id => {\n  deleteContact.pending();\n  try {\n    await axios.delete(`/contacts/${id}`);\n    return id;\n  } catch (error) {\n    deleteContact.rejected(error);\n  }\n});\n\nexport { fetchContacts, addContact, deleteContact };\n\n// witout createAsyncThunk\n\n// import {\n//   fetchContactRequest,\n//   fetchContactSuccess,\n//   fetchContactError,\n//   addContactRequest,\n//   addContactSuccess,\n//   addContactError,\n//   deleteContactRequest,\n//   deleteContactSuccess,\n//   deleteContactError,\n// } from 'redux/actions';\n\n// const fetchContacts = () => async dispatch => {\n//   dispatch(fetchContactRequest());\n//   try {\n//     const { data } = await axios.get('/contacts');\n//     console.log(data);\n//     dispatch(fetchContactSuccess(data));\n//   } catch (error) {\n//     dispatch(fetchContactError(error));\n//   }\n// };\n\n// const addContact = (name, number) => async dispatch => {\n//   const contact = {\n//     name,\n//     number,\n//   };\n//   dispatch(addContactRequest());\n//   try {\n//     const { data } = await axios.post('/contacts', contact);\n//     console.log(data);\n//     dispatch(addContactSuccess(data));\n//   } catch (error) {\n//     dispatch(addContactError(error));\n//   }\n// };\n\n// const deleteContact = id => async dispatch => {\n//   dispatch(deleteContactRequest());\n//   try {\n//     await axios.delete(`/contacts/${id}`);\n//     dispatch(deleteContactSuccess(id));\n//   } catch (error) {\n//     dispatch(deleteContactError(error));\n//   }\n// };\n","import { createAction } from '@reduxjs/toolkit';\n\n// const fetchContactRequest = createAction('contacts/fetchContactRequest');\n// const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\n// const fetchContactError = createAction('contacts/fetchContactError');\n\n// const addContactRequest = createAction('contacts/addContactRequest');\n// const addContactSuccess = createAction('contacts/addContactSuccess');\n// const addContactError = createAction('contacts/addContactError');\n\n// const deleteContactRequest = createAction('contacts/deleteContactRequest');\n// const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\n// const deleteContactError = createAction('contacts/deleteContactError');\n\nconst changeFilter = createAction('contacts/filter');\n\nexport {\n  // fetchContactRequest,\n  // fetchContactSuccess,\n  // fetchContactError,\n  // addContactRequest,\n  // addContactSuccess,\n  // addContactError,\n  // deleteContactRequest,\n  // deleteContactSuccess,\n  // deleteContactError,\n  changeFilter,\n};\n","import { createReducer } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport { fetchContacts, addContact, deleteContact } from './operations';\n\nimport { changeFilter } from 'redux/actions';\n\nfunction getNewContact(state, { payload }) {\n  const existContact = state.some(({ name }) => name === payload.name);\n  return !existContact ? [...state, payload] : alert(`${payload.name} is already in the contact`);\n}\n\nconst items = createReducer([], {\n  [fetchContacts.fulfilled]: (_, { payload }) => payload,\n  [addContact.fulfilled]: (state, action) => getNewContact(state, action),\n  [deleteContact.fulfilled]: (state, { payload }) => state.filter(({ id }) => id !== payload),\n});\n\nconst loading = createReducer(false, {\n  [fetchContacts.pending]: () => true,\n  [fetchContacts.fulfilled]: () => false,\n  [fetchContacts.rejected]: () => false,\n\n  [addContact.pending]: () => true,\n  [addContact.fulfilled]: () => false,\n  [addContact.rejected]: () => false,\n\n  [deleteContact.pending]: () => true,\n  [deleteContact.fulfilled]: () => false,\n  [deleteContact.rejected]: () => false,\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  loading,\n  filter,\n});\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport { FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from 'redux-persist';\n// import logger from 'redux-logger';\nimport contactsReducer from 'redux/reducer';\n\nconst middleware = getDefaultMiddleware => [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  // logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  devTools: process.env.NODE_ENV === 'development',\n  middleware,\n});\n\nexport { store };\n","import PropTypes from 'prop-types';\nimport s from 'components/Header/Header.module.scss';\nfunction Header({ title, children }) {\n  return (\n    <header className={s.AppHeader}>\n      <div className=\"container\">\n        <h1>{title}</h1>\n        {children}\n      </div>\n    </header>\n  );\n}\n\nHeader.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n\nexport default Header;\n","import { createSelector } from 'reselect';\n\nexport const getFilter = state => state.contacts.filter;\nexport const getContacts = state => state.contacts.items;\nexport const isLoading = state => state.contacts.loading;\n\nexport const getVisibleContacts = createSelector([getContacts, getFilter], (contacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n\n  return contacts.filter(({ name }) => name.toLowerCase().includes(normalizedFilter));\n});\n\n// export const getVisibleContacts = state => {\n//   const contacts = getContacts(state);\n//   const filter = getFilter(state);\n\n//   const normalizedFilter = filter.toLowerCase();\n//   return contacts.filter(({ name }) => name.toLowerCase().includes(normalizedFilter));\n// };\n","import { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { isLoading } from 'redux/selectors';\nimport s from 'components/Section/Section.module.scss';\n\nfunction Section({ title, children }) {\n  const loader = useSelector(isLoading);\n  return (\n    <section className={`container ${s.Section}`}>\n      {!loader && <h2 className={s.Title}>{title}</h2>}\n      <div className={s.ContentWrapper}>{children}</div>\n    </section>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport shortid from 'shortid';\nimport s from 'components/ContactForm/ContactForm.module.scss';\nimport { addContact } from 'redux/operations';\nimport { isLoading } from 'redux/selectors';\n\nexport default function Form() {\n  const dispatch = useDispatch();\n  const loader = useSelector(isLoading);\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n    switch (name) {\n      case 'name':\n        return setName(value);\n\n      case 'number':\n        return setNumber(value);\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    dispatch(addContact({ name, number }));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const nameInputId = shortid.generate();\n  const numberInputId = shortid.generate();\n\n  return (\n    !loader && (\n      <form className={s.Form} onSubmit={handleSubmit}>\n        <div className={s.Group}>\n          <input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={name}\n            id={nameInputId}\n            onChange={handleChange}\n          />\n\n          <div className=\"bar\"></div>\n        </div>\n\n        <div className={s.Group}>\n          <input\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={number}\n            id={numberInputId}\n            onChange={handleChange}\n          />\n\n          <div className=\"bar\"></div>\n        </div>\n        <button className={s.Btn} type=\"submit\">\n          add contact\n        </button>\n      </form>\n    )\n  );\n}\n\n// With import { connect } from 'react-redux';\n\n/** const mapDispatchToProps = dispatch => ({\n  onSubmit: (name, number) => dispatch(addContact(name, number)),\n});\n\nexport default connect(null, mapDispatchToProps)(Form); */\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ImBin } from 'react-icons/im';\nimport { fetchContacts, deleteContact } from 'redux/operations';\nimport { getVisibleContacts, isLoading } from 'redux/selectors';\n\nimport s from './ContactList.module.scss';\n\nexport default function ContactList() {\n  const contacts = useSelector(getVisibleContacts);\n  const loader = useSelector(isLoading);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    !loader &&\n    contacts && (\n      <table className={s.contactList}>\n        <tbody>\n          {contacts.map(({ name, number, id }) => {\n            return (\n              <tr className={s.contactListItem} id={id} key={id}>\n                <td className={s.name}>{name}</td>\n                <td className={s.number}>{number}</td>\n                <td className={s.contactBtn}>\n                  <button\n                    className={s.btn}\n                    type=\"button\"\n                    onClick={() => dispatch(deleteContact(id))}\n                  >\n                    <ImBin />\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    )\n  );\n}\n\n// With import { connect } from 'react-redux';\n\n/**\n  const getFilterContacts = (contacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n  return contacts.filter(({ name }) => name.toLowerCase().includes(normalizedFilter));\n};\n\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\n  contacts: getFilterContacts(items, filter),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: id => dispatch(deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n\n */\n","import { useSelector, useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/actions';\nimport { getFilter } from 'redux/selectors';\nimport s from 'components/Filter/Filter.module.scss';\n\nexport default function Filter() {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n  console.log(value);\n\n  return (\n    <div className={s.Filter}>\n      <label className={s.FilterLabel} htmlFor=\"\">\n        Filter contacts by name\n        <input\n          className={s.FilterInput}\n          type=\"text\"\n          value={value}\n          // autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search ...\"\n          onChange={e => dispatch(changeFilter(e.target.value))}\n        />\n      </label>\n    </div>\n  );\n}\n\n// With import { connect } from 'react-redux';\n\n/**\n const mapStateToProps = state => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n */\n","import { useSelector } from 'react-redux';\nimport Loader from 'react-loader-spinner';\n\nimport Header from 'components/Header';\nimport Section from 'components/Section';\nimport Form from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\nimport { isLoading } from 'redux/selectors';\n\nimport 'styles/shared.scss';\n\nconst App = () => {\n  const loader = useSelector(isLoading);\n\n  return (\n    <div className=\"App\">\n      <Header title={'PhoneBook'}>\n        <Filter />\n      </Header>\n      {loader && (\n        <Section>\n          <Loader type=\"Oval\" color=\"black\" height={'50vh'} width={80} />\n        </Section>\n      )}\n      <Section title={'Contacts'}>\n        <Form />\n        <ContactList />\n      </Section>\n    </div>\n  );\n};\n\nexport default App;\n\n// const [contacts, setContacts] = useState(\n//   JSON.parse(window.localStorage.getItem('contacts:')) ?? initialContacts,\n// );\n// const [filter, setFilter] = useState('');\n\n// useEffect(() => {\n//   window.localStorage.setItem('contacts:', JSON.stringify(contacts));\n// }, [contacts]);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport { Provider } from 'react-redux';\nimport { store } from 'redux/store';\n\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}